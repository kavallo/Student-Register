using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace Student_register
{
    public partial class courses : System.Web.UI.Page
    {
        string connString = ConfigurationManager.ConnectionStrings["RegisterConnection"].ConnectionString;
        protected void Page_Load(object sender, EventArgs e)
        {
            //Base on the roll, hides or shows the edit/remove buttons and panel that holds the controls for adding coursess 
            string role = Request.Cookies["current_user"]["role"];
            if (role == "student")
            {
                courseGrid.AutoGenerateDeleteButton = false;
                courseGrid.AutoGenerateEditButton = false;
                addCoursePanel.Visible = false;
                allCourses.SelectCommand = "SELECT courses.id, courses.name, courses.teacher_id, users.firstname, users.lastname FROM courses, users WHERE users.id = courses.teacher_id AND NOT EXISTS(SELECT * FROM enrolls WHERE enrolls.course_id = courses.id AND enrolls.student_id = " + int.Parse(Request.Cookies["current_user"]["id"]) + ")";
            }   //As a student, it will only select courses that the student is not enrolled in
            else
            {
                courseGrid.AutoGenerateDeleteButton = true;
                courseGrid.AutoGenerateEditButton = true;
                addCoursePanel.Visible = true;
                allCourses.SelectCommand = "SELECT courses.id, courses.name, courses.teacher_id, users.firstname, users.lastname FROM courses, users WHERE users.id = courses.teacher_id";
            }   //Selects all of the courses
            allCourses.DataBind();
            courseGrid.DataBind();
        }

        protected void addButton_Click(object sender, EventArgs e)
        {
            //Inserts a new entry into the courses table
            SqlConnection conn = new SqlConnection(connString);
            SqlCommand cmd = new SqlCommand("INSERT INTO courses(name, teacher_id) VALUES('" + cName.Text + "','" + teacherList.SelectedValue + "')", conn);
            conn.Open();
            cmd.ExecuteNonQuery();
            conn.Close();
            cName.Text = null;
            Response.Redirect("~/courses.aspx");
        }

        protected void courseGrid_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            //Checks wich command button was pressed, select or enroll
            int index = Convert.ToInt32(e.CommandArgument);
            if (e.CommandName == "Select")
            {
                Response.Redirect("~/course.aspx?course_id=" + courseGrid.Rows[index].Cells[2].Text); //If select, redirects the user to the course page
            }
            else if(e.CommandName == "enroll")
            {
                //if enroll, adds a new entry into the enrolls table and refreshes the page
                SqlConnection conn = new SqlConnection(connString);
                SqlCommand cmd = new SqlCommand("INSERT INTO enrolls(student_id, course_id) VALUES(" + int.Parse(Request.Cookies["current_user"]["id"]) + ", " + int.Parse(courseGrid.Rows[index].Cells[1].Text) + ")", conn);
                conn.Open();
                cmd.ExecuteNonQuery();
                conn.Close();
                cName.Text = null;
                allCourses.DataBind();
                courseGrid.DataBind();
                teacherSource.DataBind();
                teacherList.DataBind();
                //Bind the Data source and grid.
            }
        }

        void setName()
        {
            //Sets the label text to the name of the student that is selected in the droplist
            SqlConnection conn = new SqlConnection(connString);
            SqlCommand cmd = new SqlCommand("SELECT firstname FROM users WHERE id=" + teacherList.SelectedValue, conn);
            conn.Open();
            fNameLabel.Text = cmd.ExecuteScalar().ToString();

            conn.Close();
        }

        protected void teacherList_SelectedIndexChanged(object sender, EventArgs e)
        {
            //Calls the setName method if the droplist is not empty
            if (teacherList.Items.Count > 0)
                setName();
        }

        protected void teacherList_DataBound(object sender, EventArgs e)
        {
            //Check if there are teachers in the list, if not hides the panel for enrolling
            if (teacherList.Items.Count > 0)
                setName();
            else
                addCoursePanel.Visible = false;
        }

        protected void courseGrid_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            //After the databind, hides the editing collumn for the student and the enroll button for the admin
            string role = Request.Cookies["current_user"]["role"];
            if (role == "student")
                courseGrid.Columns[0].Visible = false;
            else if (role == "admin")
                courseGrid.Columns[5].Visible = false;
        }
    }
}